# -*- coding: utf-8 -*-
"""A0222651N_Bass_fn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TvDk0uX_TpCPgnNoZQSk_DcXS4XRMgja
"""

!pip install yfinance

import yfinance as yf
import math
import pandas as pd
import numpy as np

def find_individual_BASS(stock_symbol, benchmark_symbol, start, end):
  df = pd.DataFrame()
  df["benchmark"] = yf.Ticker(benchmark_symbol).history(start=start,end=end).Close
  df["stock"] = yf.Ticker(stock_symbol).history(start=start,end=end).Close
  df['benchmark_returns'] = df["benchmark"].pct_change()
  df['stock_returns'] = df["stock"].pct_change()
  df.dropna()
  df.head()

  # calculate Beta
  cov = df['benchmark_returns'].cov(df['stock_returns'])
  var = df['benchmark_returns'].var()

  beta = cov/var
  beta = round(beta, 2)
  # print("Beta is " + str(beta))

  # calculate alpha
  expected_benchmark_yearly_return = df["benchmark_returns"].mean() * 252
  expected_stock_yearly_return = df["stock_returns"].mean() * 252
  alpha = (expected_stock_yearly_return - (beta * expected_benchmark_yearly_return)) * 100
  alpha = round(alpha, 2)
  # print("Alpha is " + str(alpha) + "%")
  # return beta, aplha, std_dev, annual_SR

  #calculate standard deviation of stock
  std_dev = df['stock_returns'].std() * 100
  std_dev = round(std_dev, 2)

  # calculate sharpe ratio deviation
  avg_returns = df['stock_returns'].mean()
  std = df['stock_returns'].std()
  daily_sr = avg_returns/std

  annual_sr = daily_sr * (252**0.5)
  annual_sr = round(annual_sr, 2)

  # print('Annual sharpe ratio is ' +str(annual_sr))

  # calculating sharpe ratio of returns

  return beta, alpha, std_dev, annual_sr

stock_symbol = "AAPL"
benchmark_symbol = "^GSPC"
start = "2021-01-01"
end = "2021-12-31"

find_individual_BASS(stock_symbol, benchmark_symbol, start, end)

def BASS(stock_symbol, benchmark_symbol, start, end):
  stock_list = []
  beta_list = []
  alpha_list = []
  std_dv_list = []
  sr_list = []

  for item in stock_symbol:
    try:
      stock_list.append(item)
      bass_result = find_individual_BASS(item, benchmark_symbol, start, end)

      beta_list.append(bass_result[0])
      alpha_list.append(bass_result[1])
      std_dv_list.append(bass_result[2])
      sr_list.append(bass_result[3])
    except:
      print('The symbol {' + item + '} not found')
  
  output_df = pd.DataFrame()
  output_df['stock'] = stock_list
  output_df['beta'] = beta_list
  output_df['alpha (%)'] = alpha_list
  output_df['standard_dev(%)'] = std_dv_list
  output_df['sharpe'] = sr_list

  return output_df

all_stocks = ["C52.SI", "T39.SI", "S68.SI", "G13.SI", "V03.SI" , "U11.SI", "C07.SI" , "D05.SI", "Z74.SI","D01.SI", "O39.SI", "S63.SI", "A17U.SI" , "BN4.SI","BS6.SI", "M44U.SI", "H78.SI", "Y92.SI", "C38U.SI", "U14.SI", "N2IU.SI" , "F34.SI" , "C09.SI" ,"J36.SI", "S58.SI" , "C6L.SI", "U96.SI","1810.HK", "9999.HK", "7500.HK", "9618.HK", "1024.HK", "3690.HK", "6618.HK"]

benchmark_symbol = "^GSPC"
start = "2021-01-01"
end = "2021-12-31"
output_df = BASS(all_stocks, benchmark_symbol, start,end)
print(output_df.sort_values(by = "sharpe", ascending = False))